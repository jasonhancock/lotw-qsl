/*
 * Logbook of the World Query API
 *
 * LoTW provides a web service that accepts RESTful queries that report QSOs   satisfying specified criteria:    * accepted by LoTW after a specified date   * confirmed by LoTW after a specified date   * with a specified callsign   * with an operator in a specified DXCC entity   * in a specified mode   * on a specified band   * at a specified date and timeusing a specified station callsign
 *
 * API version: 1.0
 * Contact: k0swe@arrl.net
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package lotw

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

// LotwuserLotwreportAdiGetOpts Optional parameters for the method 'LotwuserLotwreportAdiGet'
type LotwuserLotwreportAdiGetOpts struct {
	QsoQsl      optional.String
	QsoQslsince optional.String
}

/*
LotwuserLotwreportAdiGet The do-everything endpoint
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param login
 * @param password
 * @param qsoQuery
 * @param optional nil or *LotwuserLotwreportAdiGetOpts - Optional Parameters:
 * @param "QsoQsl" (optional.String) -  If \"yes\", only QSL records are returned
 * @param "QsoQslsince" (optional.String) -  -| Returns QSL records received (matched or updated) on or after the specified date. Will also accept date/time in \"YYYY-MM-DD HH:MM:SS\" format.
@return string
*/
func (a *DefaultApiService) LotwuserLotwreportAdiGet(ctx _context.Context, login string, password string, qsoQuery string, localVarOptionals *LotwuserLotwreportAdiGetOpts) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/lotwuser/lotwreport.adi"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("login", parameterToString(login, ""))
	localVarQueryParams.Add("password", parameterToString(password, ""))
	localVarQueryParams.Add("qso_query", parameterToString(qsoQuery, ""))
	if localVarOptionals != nil && localVarOptionals.QsoQsl.IsSet() {
		localVarQueryParams.Add("qso_qsl", parameterToString(localVarOptionals.QsoQsl.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.QsoQslsince.IsSet() {
		localVarQueryParams.Add("qso_qslsince", parameterToString(localVarOptionals.QsoQslsince.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-arrl-adif; charset=iso-8859-1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
